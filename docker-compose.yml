version: "3.7"

x-redash-service: &redash-service
  image: redash/redash:8.0.0.b32245
  depends_on:
    - postgres
    - redis
  env_file: .env
  restart: unless-stopped

services:
  api:
    build: ./api
    volumes:
      - ./api:/api
    command: ["tail", "-f", "/dev/null"]
    env_file:
      - ./api/.env
    #network_mode: "host"
    ports:
      - 8001:8000

  mongo:
    image: mongo:4.4-bionic
    restart: unless-stopped
    #network_mode: "host"
    ports:
      - 27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: twitscrapper
      MONGO_INITDB_ROOT_PASSWORD: twitscrapper
      MONGO_INITDB_DATABASE: twitscrapper
    volumes:
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
      - mongo-data:/data/db

  mongo-express:
    image: mongo-express:0.54
    restart: unless-stopped
    #network_mode: "host"
    ports:
      - 8091:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: twitscrapper
      ME_CONFIG_MONGODB_ADMINPASSWORD: twitscrapper
      #ME_CONFIG_MONGODB_SERVER: localhost
      ME_CONFIG_MONGODB_SERVER: mongo

  server:
    <<: *redash-service
    command: server
    ports:
      - "5000:5000"
    environment:
      REDASH_WEB_WORKERS: 4

  scheduler:
    <<: *redash-service
    command: scheduler
    environment:
      QUEUES: "celery"
      WORKERS_COUNT: 1

  scheduled_worker:
    <<: *redash-service
    command: worker
    environment:
      QUEUES: "scheduled_queries,schemas"
      WORKERS_COUNT: 1

  adhoc_worker:
    <<: *redash-service
    command: worker
    environment:
      QUEUES: "queries"
      WORKERS_COUNT: 2

  redis:
    image: redis:5.0-alpine
    restart: unless-stopped

  postgres:
    image: postgres:9.6-alpine
    env_file: .env
    volumes:
      - ./redash/postgres-data:/var/lib/postgresql/data
    restart: unless-stopped

  nginx:
    image: redash/nginx:latest
    ports:
      - "80:80"
    depends_on:
      - server
    links:
      - server:redash
    restart: unless-stopped
      
volumes:
  mongo-data:
